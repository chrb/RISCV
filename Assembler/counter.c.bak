/* Test programm to print a counter on the 7-segment display */



/* Startup code: do not alter! */
asm(
    ".section\".entry\"\n\t"
    ".global _start\n\t"
    "_start:\n\t"
    "lui sp, 1\n\t"
    "jal main\n\t"
    ".global _exit\n\t"
    "_exit:\n\t"
    "j _exit\n\t"
);


#define write_csr(reg, val) asm volatile ("csrw " #reg ", %0" :: "r"(val))


static const char digit[16] = {
 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71,
}; 


void print_int_7(int v)
{
	// Original
	/*
	write_csr(0x788, ~(
		(digit[(v/1000) % 10] << 24) |
		(digit[(v/100) % 10] << 16) |
		(digit[(v/10) % 10] << 8) |
		digit[v % 10]));
	*/	
	/*
	write_csr(0x788, ~0x66); // 4
    int div = v/10;
    write_csr(0x788, ~0x6D); // 5
    int mod = div % 10;
    write_csr(0x788, ~0x7D); // 6
    int seg1 = digit[mod] << 8;
    write_csr(0x788, ~0x07); // 7
    int seg2 = digit[v % 10];
    write_csr(0x788, ~0x7F); // 8
    //int und = seg1 | seg2;
    
    write_csr(0x788, ~0x06); // 1
	//write_csr(0x788, ~(und));
        
        //(digit[(v/10) % 10] << 8) +
        //digit[v % 10];  
	*/
	int b = 16;
	write_csr(0x788, ~( digit[b % 10]));
	/*
	write_csr(0x788, ~( (0x5B << 24) | (0x4F << 16))); // 2 3 
	
	write_csr(0x788, ~0x06); // 1
    write_csr(0x788, ~( (0x70 | 0x01) << 8)); // F
    */
    
    
    //write_csr(0x788, ~0x3F); // 0

    /*
	if ((v/1000) >= 1)
		write_csr(0x788, ~(digit[v/1000] << 24));
	else if ((v/100) >= 1)
		write_csr(0x788, ~(digit[v/100] << 16));
	else if ((v/10) >= 1)
		write_csr(0x788, ~(digit[v/10] << 8));
	else
		write_csr(0x788, ~(digit[v]));
	*/
    /*
	write_csr(0x788, ~(digit[(v/1000) % 10] <<24));
	write_csr(0x788, ~(digit[(v/100) % 10] <<16));
	write_csr(0x788, ~(digit[(v/10) % 10] <<8));
	* 	*/

}

int main()
{
    //write_csr(0x788, ~0x71); // f
    int i=0;
    while (1) {
	//write_csr(0x788, ~0x79); // e
        print_int_7(i/7000);
        i++;
	//write_csr(0x788, ~0x5E); // d
    }

}
